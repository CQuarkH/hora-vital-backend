generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  rut           String?        @unique
  email         String         @unique
  phone         String?
  password      String
  role          Role           @default(PATIENT)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]  @relation("PatientAppointments")
  doctorProfile DoctorProfile?
  notifications Notification[]
}

model Specialty {
  id             String          @id @default(uuid())
  name           String          @unique
  description    String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  doctorProfiles DoctorProfile[]
}

model DoctorProfile {
  id            String        @id @default(uuid())
  userId        String        @unique
  specialtyId   String
  licenseNumber String        @unique
  bio           String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointments  Appointment[]
  specialty     Specialty     @relation(fields: [specialtyId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
}

model Schedule {
  id              String        @id @default(uuid())
  doctorProfileId String
  dayOfWeek       Int
  startTime       String
  endTime         String
  slotDuration    Int           @default(30)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  doctorProfile   DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade)

  @@unique([doctorProfileId, dayOfWeek])
}

model Appointment {
  id                 String            @id @default(uuid())
  patientId          String
  doctorProfileId    String
  specialtyId        String
  appointmentDate    DateTime
  startTime          String
  endTime            String
  status             AppointmentStatus @default(SCHEDULED)
  notes              String?
  cancellationReason String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  doctorProfile      DoctorProfile     @relation(fields: [doctorProfileId], references: [id])
  patient            User              @relation("PatientAppointments", fields: [patientId], references: [id])
  specialty          Specialty         @relation(fields: [specialtyId], references: [id])

  @@unique([doctorProfileId, appointmentDate, startTime])
}

model Notification {
  id        String            @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean           @default(false)
  data      Json?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  PATIENT
  SECRETARY
  ADMIN
  DOCTOR
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_CANCELLATION
  GENERAL
}
